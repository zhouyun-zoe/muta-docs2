{"remainingRequest":"/Users/Yun/Desktop/docs2/my-website/node_modules/babel-loader/lib/index.js??ref--7-1!/Users/Yun/Desktop/docs2/my-website/node_modules/@docusaurus/mdx-loader/src/index.js??ref--7-2!/Users/Yun/Desktop/docs2/my-website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--7-3!/Users/Yun/Desktop/docs2/my-website/docs/built_in_service.md","dependencies":[{"path":"/Users/Yun/Desktop/docs2/my-website/docs/built_in_service.md","mtime":1588930933915},{"path":"/Users/Yun/Desktop/docs2/my-website/.docusaurus/docusaurus-plugin-content-docs/site-docs-built-in-service-md-b7c.json","mtime":1588934413532},{"path":"/Users/Yun/Desktop/docs2/my-website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Yun/Desktop/docs2/my-website/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Yun/Desktop/docs2/my-website/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/Yun/Desktop/docs2/my-website/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}