(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{175:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var o=t(1),r=t(9),a=(t(0),t(196)),i={id:"private-config",title:"Configuration"},l={id:"tutorial/private-network/private-config",title:"Configuration",description:"After creating the genesis block, Each validators need to config the node. Node configuration parameters can be found in `devtool/chain/config.toml`.",source:"@site/docs/tutorial/private-network/private-config.md",permalink:"/muta-docs2/docs/tutorial/private-network/private-config",editUrl:"https://github.com/nervosnetwork/muta-docs/docs/tutorial/private-network/private-config.md",sidebar:"tutorial",previous:{title:"Create the Genesis Block",permalink:"/muta-docs2/docs/tutorial/private-network/private-genesis"},next:{title:"Run Your Private Network",permalink:"/muta-docs2/docs/tutorial/private-network/private-run"}},c=[{value:"Alice configures her node",id:"alice-configures-her-node",children:[]},{value:"Others&#39; configuration",id:"others-configuration",children:[{value:"For Bob",id:"for-bob",children:[]},{value:"For Ben",id:"for-ben",children:[]},{value:"For Bill",id:"for-bill",children:[]}]}],s={rightToc:c};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"After creating the genesis block, Each validators need to config the node. Node configuration parameters can be found in ",Object(a.b)("inlineCode",{parentName:"p"},"devtool/chain/config.toml"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"The fields of this file we need to pay more attention are:")," "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"privkey"),": private key of this node"),Object(a.b)("li",{parentName:"ul"},"Under ",Object(a.b)("inlineCode",{parentName:"li"},"[network]"),", ",Object(a.b)("inlineCode",{parentName:"li"},'listening_address = "0.0.0.0:1337"')," specifies the address that your node will listen."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"[[network.bootstraps]]"),", specifies the information of bootstraps node that your node will connect, including the public key and listening address. Bootstrap node can leave this filed empty.")),Object(a.b)("h2",{id:"alice-configures-her-node"},"Alice configures her node"),Object(a.b)("p",null,"After adding required infomation and leaving ",Object(a.b)("inlineCode",{parentName:"p"},"[[network.bootstraps]]")," empty  , ",Object(a.b)("inlineCode",{parentName:"p"},"config.toml")," in Alice's node looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'data_path = "./devtools/chain/data/1"\nprivkey = "0x592d6f62cd5c3464d4956ea585ec7007bcf5217eb89cc50bf14eea95f3b09706"\n\n[network]\nlistening_address = "0.0.0.0:1337"\nrpc_timeout = 10\n\n[graphql]\ngraphiql_uri = "/graphiql"\nlistening_address = "0.0.0.0:8000"\ngraphql_uri = "/graphql"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = "info"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = "logs/"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { "overlord::state::process" = "debug", core_consensus = "error" }\n\n')),Object(a.b)("h2",{id:"others-configuration"},"Others' configuration"),Object(a.b)("h3",{id:"for-bob"},"For Bob"),Object(a.b)("p",null,"Bob adds his private key, specifies his ",Object(a.b)("inlineCode",{parentName:"p"},"[network]")," and got Alice's infomation to fill into ",Object(a.b)("inlineCode",{parentName:"p"},"[[network.bootstraps]]"),".\n( In this case, we also modifies ",Object(a.b)("inlineCode",{parentName:"p"},"lisening_adress")," under ",Object(a.b)("inlineCode",{parentName:"p"},"[graphql]"),", since these four nodes are on the same server)."),Object(a.b)("p",null,"Then the ",Object(a.b)("inlineCode",{parentName:"p"},"config.toml")," in Bob's node looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'data_path = "./devtools/chain/data/2"\nprivkey = "0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f"\n\n[network]\nlistening_address = "0.0.0.0:1338"\nrpc_timeout = 10\n\n[[network.bootstraps]]\npubkey = "0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355"\naddress = "localhost:1337" # Replace it with your IP\n\n[graphql]\ngraphiql_uri = "/graphiql"\nlistening_address = "0.0.0.0:8001"\ngraphql_uri = "/graphql"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = "info"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = "logs/"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { "overlord::state::process" = "debug", core_consensus = "error" }\n')),Object(a.b)("h3",{id:"for-ben"},"For Ben"),Object(a.b)("details",null,Object(a.b)("summary",null,"(click here to view)"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'data_path = "./devtools/chain/data/2"\nprivkey = "0x8b41630934fc7df92a016af88aae477bd173118fb72113f31db8a950230b029f"\n\n[network]\nlistening_address = "0.0.0.0:1339"\nrpc_timeout = 10\n\n[[network.bootstraps]]\npubkey = "0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355"\naddress = "localhost:1337" # Replace it with your IP\n\n[graphql]\ngraphiql_uri = "/graphiql"\nlistening_address = "0.0.0.0:8002"\ngraphql_uri = "/graphql"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = "info"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = "logs/"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { "overlord::state::process" = "debug", core_consensus = "error" }\n'))),Object(a.b)("h3",{id:"for-bill"},"For Bill"),Object(a.b)("details",null,Object(a.b)("summary",null,"(click here to view)"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),'data_path = "./devtools/chain/data/2"\nprivkey = "0x8e065679aa8b1185406c7514343073cd8c1695218925c9b2d5e98c3483d71d81"\n\n[network]\nlistening_address = "0.0.0.0:1340"\nrpc_timeout = 10\n\n[[network.bootstraps]]\npubkey = "0x02fa3a27712962a70e3e474363f38661f6a9e56f9cc91efd0d343713d51f3fa355"\naddress = "localhost:1337" # Replace it with your IP\n\n[graphql]\ngraphiql_uri = "/graphiql"\nlistening_address = "0.0.0.0:8003"\ngraphql_uri = "/graphql"\nworkers = 0 # if 0, uses number of available logical cpu as threads count.\nmaxconn = 25000\nmax_payload_size = 1048576\n\n[mempool]\npool_size = 20000\nbroadcast_txs_size = 200\nbroadcast_txs_interval = 200\n\n[executor]\nlight = false\n\n[logger]\nfilter = "info"\nlog_to_console = true\nconsole_show_file_and_line = false\nlog_path = "logs/"\nlog_to_file = true\nmetrics = true\n# you can specify log level for modules with config below\n# modules_level = { "overlord::state::process" = "debug", core_consensus = "error" }\n'))),Object(a.b)("p",null,"In these case , we name the generated file ",Object(a.b)("inlineCode",{parentName:"p"},"config-alice.toml"),", ",Object(a.b)("inlineCode",{parentName:"p"},"config-bob.toml"),", ",Object(a.b)("inlineCode",{parentName:"p"},"config-ben.toml"),", ",Object(a.b)("inlineCode",{parentName:"p"},"config-bill.toml")," under ",Object(a.b)("inlineCode",{parentName:"p"},"devtools/chain"),"."))}d.isMDXComponent=!0},196:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),d=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l({},n,{},e)),t},p=function(e){var n=d(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(t),u=o,f=p["".concat(i,".").concat(u)]||p[u]||b[u]||a;return t?r.a.createElement(f,l({ref:n},s,{components:t})):r.a.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);